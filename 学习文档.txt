1、git冲突，分支，合并
   
   查看分支：git branch
   创建分支：git branch <name>
   切换分支：git checkout <name>
   创建+切换分支：git checkout -b <name>
   合并某分支到当前分支：git merge <name>
   删除分支：git branch -d <name>
   
   当分支提交完成之后 切换到主分支，然后进行合并git merge <name> 合并完成在push到github
   https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000

2、小程序ios和安卓的兼容性问题
   
   newDate(“2018-08-08”)，在ios会出现NaN的情况，ios只支持newDate(“2018/08/08”)
   display:flex样式在ios8以及一下的的版本需要做兼容处理
   margin在IOS中失效（小程序本身问题需绕开）
   ixed定位 整个页面的fixed定位，在ios下下拉会触发下拉事件，但是没有动画效果。Android就能正常运行（尽量不用fixed）
   	

3、微信支付

4、this指向问题

   ①this的指向在函数创建的时候是决定不了的，在调用的时候才能决定，谁调用的就指向谁
   function a(){
      var user = "小J";
      console.log(this.user); //undefined
      console.log(this); //Window
   }
   a(); //指向全局Window
   
   var o = {
      user:"追梦子",
      fn:function(){
         console.log(this.user);  //追梦子
      }
   }
   o.fn(); //指向o
   
   var o = {
      a:10,
      b:{
          a:12,
          fn:function(){
              console.log(this.a); //12
          }
      }
   }
   o.b.fn() //指向b
   
   var o = {
      a:10,
      b:{
          a:12,
          fn:function(){
              console.log(this.a); //undefined
              console.log(this); //window
          }
      }
   }
   var j = o.b.fn;
   j(); //this永远指向的是最后调用它的对象  指向Window
   
   ②函数直接调用，严格模式下为undefined 非严格模式下默认指向全局对象

   ③this碰到return时 如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例。
   
   ④call和apply，this绑定到第一个参数上
   
   ⑤箭头函数不绑定this，它会捕获其所在（即定义的位置）上下文的this值， 作为自己的this值，
   
   ⑥原型链中的方法的this仍然指向调用它的对象

   ⑦setTimeout & setInterval对于延时函数内部的回调函数的this指向全局对象window（当然我们可以通过bind方法改变其内部函数的this指向）
   

5、javascript原型链